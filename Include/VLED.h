#pragma once

//Onload

typedef enum enOnloadType
{
    ONLOADER_NORMAL_LF,
    ONLOADER_COPPER_LF,
};

typedef enum enOnloadEvent 
{
    ONLOAD_IDLE, 
    ONLOAD_EVENT_START,
};

typedef enum enOnloadState
{
    ONLOAD_STATE_IDLE,
	ONLOAD_STATE_WAIT_STEP_ABOVE_TRACK,
	ONLOAD_STATE_WAIT_LF_DROP_DOWN,
    ONLOAD_STATE_WAIT_PICKER_FORWARD,
    ONLOAD_STATE_WAIT_BACK_DELAY,
    ONLOAD_STATE_WAIT_PICKER_BACK,
	ONLOAD_STATE_WAIT_DROP_LF_DELAY,
	ONLOAD_STATE_ONLOAD_END,
};

typedef enum enOnloadPickState
{
    ONLOAD_PICK_SUCCESS,
    ONLOAD_PICK_PENDING,
};

//Track

typedef enum enInjectEvent 
{
    INJECT_EVENT_IDLE,
    INJECT_EVENT_PUSH_TO_CHECK_POS,
    INJECT_EVENT_PUSH_TO_INJECT_POS,
};

typedef enum enInjectState
{
     INJECT_EVENT_STATE_IDLE, 
     INJECT_EVENT_STATE_WAIT_DBCHECK_POS,
     INJECT_EVENT_STATE_CHECK_DOUBLE_LF,
	 INJECT_EVENT_STATE_PUSH_LIMIT,
     INJECT_EVENT_STATE_WAIT_PUSH_LIMIT,
     INJECT_EVENT_STATE_WAIT_ROLLER_DELAY,
     INJECT_EVENT_STATE_WAIT_FINISH,
	 INJECT_EVENT_STOP_INJECT,
};

typedef enum enInjectPos
{
    INJECT_POS_INIT,
    INJECT_POS_HOME,
    INJECT_POS_CHECK_DOUBLE_LF,
    INJECT_POS_INJECT,
};

typedef enum enIndexEvent 
{
    TRACK_EVENT_IDLE, 
    TRACK_EVENT_INDEX,
    TRACK_EVENT_FIRST_INDEX,
};

typedef enum enIndexState 
{
    TRACK_STATE_IDLE, 
	TRACK_STATE_INDEX_OPEN_CLAMP,
	TRACK_STATE_INITIAL_INDEX,
	TRACK_STATE_CLAMP_OPEN,
    TRACK_STATE_WAIT_CLAMP_OPEN,
    TRACK_STATE_WAIT_CLAMP_OPEN_2,
	TRACK_STATE_FEED_IN,
	TRACK_STATE_WAIT_FEED_IN,
	TRACK_STATE_PREHEAT_DELAY,
	TRACK_STATE_DELAY_CLAMP,
	TRACK_STATE_WAIT_CLAMP_CLOSE,
    TRACK_STATE_NORMAL_PREHEAT_DELAY,
	TRACK_STATE_END,
};
